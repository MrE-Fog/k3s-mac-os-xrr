#!/bin/bash
# Name of cluster (or autogenerated)
NAME=${NAME}
IMAGE=${IMAGE:-focal}
CPU_MACHINE=${CPU_MACHINE:-2}
DISK_MACHINE=${DISK_MACHINE:-30G}
MEMORY_MACHINE=${MEMORY_MACHINE:-4G}
# Preconfigured secret to join the cluster (or autogenerated if empty)
CLUSTER_SECRET=""
SED="sed -i\"\""

## Nothing to change after this line
if [ -x "$(command -v multipass.exe)" > /dev/null 2>&1 ]; then
  # Windows
  MULTIPASSCMD="multipass.exe"
elif [ -x "$(command -v multipass)" > /dev/null 2>&1 ]; then
  # Linux/MacOS
  MULTIPASSCMD="multipass"
  if [[ "$OSTYPE" == "linux-gnu"* ]]; then
    SET="sed -i \"\""
  fi
else
  echo "The multipass binary (multipass or multipass.exe) is not available or not in your \$PATH"
  exit 1
fi

if [ -z $CLUSTER_SECRET ]; then
 CLUSTER_SECRET=$(cat /dev/urandom | base64 | tr -dc 'a-zA-Z0-9' | fold -w 20 | head -n 1 | tr '[:upper:]' '[:lower:]')
 echo "No cluster secret given, generated secret: ${CLUSTER_SECRET}"
fi

# Check if name is given or create random string
if [ -z $NAME ]; then
    NAME=$(cat /dev/urandom | base64 | tr -dc 'a-zA-Z0-9' | fold -w 6 | head -n 1 | tr '[:upper:]' '[:lower:]')
    NAME="k3s-server-${NAME}"
    echo "No name given, generated name: ${NAME}"
fi

echo "Creating k3s VM ${NAME}"

# Prepare cloud-init
# Cloud init template
target="/etc/rancher/k3s/registries.yaml"
registry_domain="docker.test"
registry_port=32000
manifests="/var/lib/rancher/k3s/server/manifests"
read -r -d '' CLOUDINIT_TEMPLATE << EOM
#cloud-config
write_files:
- content: |
    apiVersion: v1
    kind: Namespace
    metadata:
      name: cert-manager
  path: $manifests/0-cert-manager-namespace.yml
- content: |
    apiVersion: v1
    kind: Namespace
    metadata:
      name: ingress-nginx
  path: $manifests/0-ingress-nginx-namespace.yml
- content: |
    apiVersion: helm.cattle.io/v1
    kind: HelmChart
    metadata:
      name: registry
      namespace: kube-system
    spec:
      chart: docker-registry
      repo: https://helm.twun.io
      targetNamespace: default
      set:
        persistence.enabled: "true"
        persistence.deleteEnabled: "true"
        service.type: "NodePort"
        service.nodePort: "32000"
  path: $manifests/1-registry.yml
- content: |
    apiVersion: helm.cattle.io/v1
    kind: HelmChart
    metadata:
      name: cert-manager
      namespace: kube-system
    spec:
      chart: cert-manager
      repo: https://charts.jetstack.io
      targetNamespace: cert-manager
      version: v1.1
      set:
        installCRDs: "true"
  path: $manifests/2-cert-manager.yml
- content: |
    apiVersion: helm.cattle.io/v1
    kind: HelmChart
    metadata:
      name: nginx-ingress
      namespace: kube-system
    spec:
      chart: ingress-nginx
      repo: http://kubernetes.github.io/ingress-nginx
      targetNamespace: ingress-nginx
      version: 3.20.1
      set:
       controller.publishService.enabled: "true"
  path: $manifests/3-nginx-ingress.yml
- content: |
    mirrors:
      "${registry_domain}:${registry_port}":
        endpoint:
          - http://${registry_domain}:${registry_port}
  path: $target
runcmd:
  - [ sh, -xc,  "fallocate -l 2G /swapfile && chmod 600 /swapfile && mkswap /swapfile && swapon /swapfile" ]
  - '\curl -sfL https://get.k3s.io | K3S_CLUSTER_SECRET=$CLUSTER_SECRET K3S_KUBECONFIG_MODE=644 INSTALL_K3S_EXEC="--disable traefik" sh -'
EOM

echo "$CLOUDINIT_TEMPLATE" > "${NAME}-cloud-init.yaml"
echo "Cloud-init is created at ${NAME}-cloud-init.yaml"

echo "Running $MULTIPASSCMD launch --cpus $CPU_MACHINE --disk $DISK_MACHINE --mem $MEMORY_MACHINE $IMAGE --name $NAME --cloud-init ${NAME}-cloud-init.yaml"
$MULTIPASSCMD launch --cpus $CPU_MACHINE --disk $DISK_MACHINE --mem $MEMORY_MACHINE $IMAGE --name $NAME --cloud-init "${NAME}-cloud-init.yaml"
if [ $? -ne 0 ]; then
    echo "There was an error launching the instance"
    exit 1
fi

echo "Checking for server being Ready on ${NAME}"
$MULTIPASSCMD exec $NAME -- /bin/bash -c 'while [[ $(sudo k3s kubectl get nodes --no-headers 2>/dev/null | grep -c -v "NotReady") -eq 0 ]]; do echo "."; sleep 2; done'
echo "Node is Ready on ${NAME}"

echo "Checking for manifests being insalled on ${NAME}"
$MULTIPASSCMD exec $NAME -- /bin/bash -c 'while [[ $(sudo k3s kubectl get pods -n kube-system --no-headers 2>/dev/null | grep "helm-install" | grep -c -v "Completed") -ne 0 ]]; do echo "."; sleep 2; done'
echo "helms are installed on ${NAME}"

mkdir -p ~/.kube

function kmerge() {
    KUBECONFIG=~/.kube/config:$1 kubectl config view --flatten > ~/.kube/mergedkub && mv ~/.kube/mergedkub ~/.kube/config
}

SERVER_IP=$($MULTIPASSCMD info $NAME | grep IPv4 | awk '{ print $2 }')
$MULTIPASSCMD copy-files $NAME:/etc/rancher/k3s/k3s.yaml $NAME-kubeconfig-orig.yaml
sed -e "/^[[:space:]]*server:/ s_:.*_: \"https://$(echo $SERVER_IP | sed -e 's/[[:space:]]//g'):6443\"_" $NAME-kubeconfig-orig.yaml > $NAME-kubeconfig.yaml
echo $SED -e "s|name: default|name: $NAME|" $NAME-kubeconfig.yaml
$SED -e "s|name: default|name: $NAME|" $NAME-kubeconfig.yaml
echo $SED -e "s|user: default|user: $NAME|" $NAME-kubeconfig.yaml
$SED -e "s|user: default|user: $NAME|" $NAME-kubeconfig.yaml
echo $SED -e "s|cluster: default|cluster: $NAME|" $NAME-kubeconfig.yaml
$SED -e "s|cluster: default|cluster: $NAME|" $NAME-kubeconfig.yaml
echo $SED -e "s|current-context: default|current-context: $NAME|" $NAME-kubeconfig.yaml
$SED -e "s|current-context: default|current-context: $NAME|" $NAME-kubeconfig.yaml
echo "k3s setup finished"
kubectl --kubeconfig ${NAME}-kubeconfig.yaml get nodes
kubectl --kubeconfig ${NAME}-kubeconfig.yaml get pods -A
echo "$MULTIPASSCMD exec ${NAME} -- sudo k3s kubectl get nodes"
echo "Or use kubectl directly"
echo "kubectl --kubeconfig ${NAME}-kubeconfig.yaml get nodes"
kmerge ${NAME}-kubeconfig.yaml
echo "Switch kubectl context to ${NAME}"
kubectl config use-context ${NAME}
